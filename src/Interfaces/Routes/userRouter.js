"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const userController_1 = require("../controllers/userController");
const jobController_1 = require("../controllers/jobController");
const applicationController_1 = require("../controllers/applicationController");
const candidateAuth_1 = require("../Middlewares/candidateAuth");
const ExamController_1 = require("../controllers/ExamController");
const subscription_Controller_1 = require("../controllers/subscription.Controller");
const mockTestController_1 = require("../controllers/mockTestController");
const publicQuestion_1 = require("../controllers/publicQuestion");
const empAuth_1 = require("../Middlewares/empAuth");
const router = (0, express_1.Router)();
router.get('/', (req, res) => {
    console.log("working");
    res.json({ status: 'done' });
});
router.post('/', userController_1.auth);
router.post('/login', userController_1.userLoginController);
router.post('/register', userController_1.userRegister);
router.post('/generate-otp', userController_1.generateOtp);
router.post('/logout', userController_1.removeRefreshToken);
router.get('/alljobs', jobController_1.getAllJobs);
router.get('/domains', jobController_1.getDomains);
router.get('/job/:id', candidateAuth_1.candidateAuth, jobController_1.getSingleJOb);
router.get('/savejobs', candidateAuth_1.candidateAuth, jobController_1.getSavedJobsCntrl);
router.post('/bookmarkjob', candidateAuth_1.candidateAuth, jobController_1.bookmarkCntrl);
router.post('/removesaved', candidateAuth_1.candidateAuth, jobController_1.removeBookmarkCntrl);
router.post('/applyjob', candidateAuth_1.candidateAuth, applicationController_1.applyJobCntrl);
router.post('/basic-update/:userId', candidateAuth_1.candidateAuth, userController_1.updateBasicInformation);
router.post('/profile-update/:userId', candidateAuth_1.candidateAuth, userController_1.updateProfileInformation);
router.put('/education-update/:userId', candidateAuth_1.candidateAuth, userController_1.updateEducationInformation);
router.put('/professional-update/:userId', candidateAuth_1.candidateAuth, userController_1.updateProfInformation);
router.get('/getuserdata/:userId', userController_1.getUserDataCntrl);
router.get('/user-applied-jobs/:userId', candidateAuth_1.candidateAuth, applicationController_1.getAppliedByUserCntrl);
router.get('/get-exam/:exam', ExamController_1.getExamcntrl);
router.post('/setattended', ExamController_1.setAttended);
router.post('/submitexam', ExamController_1.submitExam);
router.post('/add-subscription', subscription_Controller_1.addSubscriptionCntrl);
router.post('/create-exam', mockTestController_1.CreateMockTestCntrl);
router.get('/get-Mockexam/:id', mockTestController_1.getMockTestCntrl);
router.post('/setmockattended', mockTestController_1.setMockAttendedCntrl);
router.post('/submitmocktest', mockTestController_1.submitMockAnswerCntrl);
router.get('/premiumpage/:user', userController_1.getPremiumPageData);
router.post('/addpublicquestion', publicQuestion_1.addPubilcQuestion);
router.get('/getpublicquestions', publicQuestion_1.getPublicQuestions);
router.get('/getPublicQuestion/:id', publicQuestion_1.getPublicQuestion);
router.post('/postAnswerPublicQuestion/:id', publicQuestion_1.ansPublicQuestion);
router.get('/getmyAnswer/:id', publicQuestion_1.getMyAns);
router.put('/editmyanswer', publicQuestion_1.editMyAns);
router.get('/getanswers/:id', publicQuestion_1.getPublicAnswersById);
router.put('/likeanswer', publicQuestion_1.answerlikeCntrl);
router.put('/unlikeanswer', publicQuestion_1.undoAnslikeCntrl);
router.put('/likequestion', candidateAuth_1.candidateAuth, publicQuestion_1.questionLike);
router.put('/unlikequestion', candidateAuth_1.candidateAuth, publicQuestion_1.questionUnLike);
router.get('/getmypublicquestion/:id', publicQuestion_1.getmypublicquestions);
router.get('/getmypublicanswer/:id', publicQuestion_1.getmypublicanswers);
router.put('/updatepublicquestion', candidateAuth_1.candidateAuth, publicQuestion_1.updateQueCntrl);
router.get('/dashboard/:id', candidateAuth_1.candidateAuth, userController_1.getDashboardData);
router.put(`/myprofile`, candidateAuth_1.candidateAuth, userController_1.updateUserProfile);
router.put('/updateEmployer', empAuth_1.empAuth, userController_1.updateEmployerProfile);
router.get('/getallmocktests', candidateAuth_1.candidateAuth, mockTestController_1.getMyMockTests);
router.get('/get-results/:exam', candidateAuth_1.candidateAuth, mockTestController_1.getMockResCntrl);
router.put('/changepassword', candidateAuth_1.candidateAuth, userController_1.changePasswordCntrl);
router.put('/deactivate', candidateAuth_1.candidateAuth, userController_1.deactivateAccount);
router.get('/search/:key', jobController_1.jobSearchCntrl);
router.post('/forgotpassword', userController_1.forgotPasswordOTP);
router.post('/forgotsubmitOtp', userController_1.forgotpasswordOTPSubmit);
router.post('/updatenewpassword', userController_1.updatePasswordCntrl);
exports.default = router;
